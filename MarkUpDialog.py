# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VisualOptions.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import SimpleFields
import GlobalVariables
from Function_class import Function_Gui
from otherFunctions import wrap

class area_mark_up(SimpleFields.AreaEntry):
    def __init__(self):
        super().__init__(edit=False)
        """if opening from event, it should add text to display field. but if opening from simple text field
        it should probably not do anything"""
        self.return_target = None
        """if doubleclicked on treeview, then update current text"""
        self.flag_update = False

    def keyPressEvent(self, event: QtGui.QKeyEvent):
        if self.return_target:
            if event.key() == QtCore.Qt.Key_Return:
                self.add_verse()
                return
            elif event.key() == QtCore.Qt.Key_Escape:
                self.clear_val()
                self.flag_update = False
        super().keyPressEvent(event)

    def add_verse(self):
        text = wrap(self.get_val(), length=150)
        if text:
            if self.flag_update:
                self.return_target.update_leaf(text)
                self.flag_update = False
            elif self.return_target.selected_element():
                """if already selected something, then insert above it"""
                self.return_target.insert_row([text])
            else:
                self.return_target.add_data(data=text)
            self.clear_val()
    def insert_text(self, text):
        """insert value where cursor is."""
        self.insertPlainText(text)


class MarkUp_Window(QtWidgets.QWidget):
    def __init__(self, target_field=None, scenes_flag=None, data_for_functions=None, current_scene_list=None):
        super().__init__()
        if current_scene_list:
            self.current_scenes = current_scene_list
        else:
            self.current_scenes = None
        """target field - either treeview for scenes or text field for some fields that allow markups
        scenes_flag - if textfied is target, no need to display treeview for scenes"""
        self.setWindowTitle('Events')
        # Dialog.resize(310, 299)
        # self.widget.setGeometry(QtCore.QRect(0, 10, 301, 281))
        self.setObjectName("FunctionWin")
        self.resize(900, 500)

        self.v_main_layout = QtWidgets.QVBoxLayout(self)
        self.v_main_layout.setContentsMargins(0, 0, 0, 0)
        self.v_main_layout.setObjectName("mainLayout")
        self.setLayout(self.v_main_layout)


        h_layout_buttons = QtWidgets.QHBoxLayout()
        h_layout_buttons.setObjectName("button_layout")
        """all the buttons for markups here"""
        placeholder_buttons = SimpleFields.CustomButton(self, 'placeholder width')
        # placeholder_buttons.clicked.connect(lambda: self.change_size(1))
        placeholder_buttons.clicked.connect(self.test)
        placeholder_buttons2 = SimpleFields.CustomButton(self, 'placeholder2 heigh')
        placeholder_buttons2.clicked.connect(lambda: self.change_size(2))
        h_layout_buttons.addWidget(placeholder_buttons)
        h_layout_buttons.addWidget(placeholder_buttons2)
        self.v_main_layout.addLayout(h_layout_buttons)

        """main data. Area text for input and treeview for display on the left
        checkboxes, treeview for functions and functions creation on right"""
        """first, vertical, contains area text and treeview"""
        # v_layout_main_input = QtWidgets.QVBoxLayout()
        # v_layout_main_input.setObjectName("main_input_layout")
        self.text_test = SimpleFields.SimpleEntry(self)
        self.text_test.set_up_widget(self.v_main_layout)
        # self.area_input = SimpleFields.AreaEntry(self, edit=False)
        self.area_input = area_mark_up()
        self.area_input.setMaximumSize(800, 100)
        self.area_input.set_up_widget(self.v_main_layout)
        """now, display data on the left and on the right, checkboxes and functions gui"""
        """on the left is only treeview for data from input.
        on the right is top - 2 checkboxes, then below area with explanation, treeview with functions and 2 buttons"""
        h_layout_display_f_gui = QtWidgets.QHBoxLayout()
        # v_layout_left_side = QtWidgets.QVBoxLayout()
        # h_layout_display_f_gui.addLayout(v_layout_left_side)
        if scenes_flag:
            self.display_data = SimpleFields.ElementsList(self, "Event text")
            self.display_data.parent_tag = 'function'
            self.display_data.setMinimumSize(400, 300)
            self.display_data.set_up_widget(h_layout_display_f_gui)
            self.display_data.doubleClicked.connect(self.update_row)
        else:
            self.display_data = None
        v_layout_right_side = QtWidgets.QVBoxLayout()
        h_layout_display_f_gui.addLayout(v_layout_right_side)
        """layout for functions field creations, already added"""
        self.v_layout_function_fields = QtWidgets.QVBoxLayout()
        self.v_layout_function_fields.setObjectName('function_fields_layout')
        h_layout_display_f_gui.addLayout(self.v_layout_function_fields)
        h_layout_display_f_gui.addStretch(1)
        """2 checkboxes, determine how to add functions"""
        h_lay_checkboxes = QtWidgets.QHBoxLayout()
        self.checkbox_text = SimpleFields.CheckBox(self, 'TEXT', 't')
        self.checkbox_text.set_up_widget(h_lay_checkboxes)
        self.checkbox_event = SimpleFields.CheckBox(self, 'EVENT', 'e')
        self.checkbox_event.set_up_widget(h_lay_checkboxes)
        self.button_group = QtWidgets.QButtonGroup()
        self.button_group.addButton(self.checkbox_text)
        self.button_group.addButton(self.checkbox_event)
        self.button_group.buttonToggled.connect(self.on_checkbox_toggled)
        """flag function will be list. first its a 0/1, second, target field"""
        self.flag_function_target_type = []
        if not scenes_flag:
            self.checkbox_event.setEnabled(False)
            self.checkbox_text.set_val(True)
            self.checkbox_event.setEnabled(False)
        h_lay_checkboxes.setAlignment(QtCore.Qt.AlignCenter)
        v_layout_right_side.addLayout(h_lay_checkboxes)
        """functions gui"""
        # TODO function gui for now
        self.functions = Function_Gui(self.flag_function_target_type, None, self, fields_lay=self.v_layout_function_fields,
                                      checkboxes=self.button_group, scene_list=current_scene_list)
        self.functions.set_up_widget(v_layout_right_side)

        self.v_layout_function_fields.addStretch(1)
        # """second, 2 checkboxes for adding function to text of event and now the hard part, whole functionality"""
        # h_lay_functions_main = QtWidgets.QHBoxLayout()
        # h_lay_functions_main.setObjectName('functions_layout_main')
        # v_layout_function_window = QtWidgets.QVBoxLayout()
        # v_layout_function_window.setObjectName('function_window_layout')
        # h_lay_checkboxes = QtWidgets.QHBoxLayout()
        # self.checkbox_text = SimpleFields.CheckBox(self, 'text', 't')
        # self.checkbox_text.set_up_widget(h_lay_checkboxes)
        # self.checkbox_event = SimpleFields.CheckBox(self, 'event', 'e')
        # self.checkbox_event.set_up_widget(h_lay_checkboxes)
        # self.flag_function_target_type = None
        # v_layout_function_window.addLayout(h_lay_checkboxes)
        self.v_main_layout.addLayout(h_layout_display_f_gui)
        #
        # v_layout_function_fields = QtWidgets.QVBoxLayout()
        # # self.functions = Function_Gui(self.flag_function_target_type, None, fields_lay=v_layout_function_fields)
        # # self.functions.set_up_widget(v_layout_function_window)
        #
        # h_lay_functions_main.addLayout(v_layout_function_window)
        # h_lay_functions_main.addLayout(v_layout_function_fields)

        # self.buttonBox = QtWidgets.QDialogButtonBox(self)
        # self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        # self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Ok)
        # self.buttonBox.setObjectName("buttonBox")
        # self.v_main_layout.addWidget(self.buttonBox)
        #
        # self.retranslateUi(Dialog)
        # self.buttonBox.accepted.connect(Dialog.accept)
        # self.buttonBox.rejected.connect(Dialog.reject)
        # QtCore.QMetaObject.connectSlotsByName(Dialog)
        if scenes_flag:
            self.area_input.return_target = self.display_data

    def on_checkbox_toggled(self, checkbox, checked):
        if checked:
            for button in self.button_group.buttons():
                # TODO change back to black, this is not working
                button.setStyleSheet("QCheckBox { color: blue }")
                if button != checkbox:
                    button.setChecked(False)
            if checkbox.text() == 'EVENT':
                self.functions.target_type = [1, self.display_data]
            else:
                self.functions.target_type = [0, self.area_input]


    def change_size(self, param):
        self.adjustSize()
        # value = int(self.text_test.get_val())
        # if param == 1:
        #     self.area_input.setMaximumWidth(value)
        # else:
        #     self.area_input.setMaximumHeight(value)
        # self.area_input.set_val('width - ' + str(self.area_input.size().width()) + ', heigh - ' + str(self.area_input.size().height()))
    # def retranslateUi(self, dialog):
    #     _translate = QtCore.QCoreApplication.translate
    #     dialog.setWindowTitle(_translate("Dialog", "Event Text"))
    def update_row(self):
        selected_item = self.display_data.selected_element()
        if selected_item.whatsThis() != 'function':
        # if selected_item.parent() is None or (selected_item.parent() and isinstance(selected_item.text(), int)):
            self.area_input.clear_val()
            self.area_input.set_val(selected_item.text())
            self.area_input.flag_update = True

    def test(self):
        temp = self.area_input.textCursor()
        print(temp.selectionStart())
        print(temp.selectionEnd())
        print(temp.selectedText())